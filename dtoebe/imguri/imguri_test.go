package imguri

import (
	"reflect"
	"testing"

	"github.com/dtoebe/gophx-img-api/settingsloader"
	. "github.com/dtoebe/gophx-img-api/testerror"
)

var expectedURI = "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"

func TestNewImg(t *testing.T) {
	exp := "*image.RGBA"
	res := reflect.TypeOf(newImg(100)).String()
	ErrorOut("newImg", exp, res, t)
}

func TestCreateImgData(t *testing.T) {
	s := settingsloader.NewSettings("../server-config.json")
	exp := expectedURI
	res, err := CreatImgData(9999, s.FontPath)
	ErrorOut("CreatImgData", exp, res, t)
	if err != nil {
		ErrorOut("CreatImgData: error", "", err.Error(), t)
	}
}
